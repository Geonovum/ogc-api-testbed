version: '3.3'
# See also ansible/vars/vars.yml how settings are configured

services:

  ghc_web:
    image: geopython/geohealthcheck:latest
    container_name: ghc_web

    expose:
      - 80

#    ports:
#      - 8003:80

    env_file:
      - ghc.env

    labels:
      # Enable Traefik routing on overlay service network
      - "traefik.enable=true"
      - "traefik.docker.network=service-network"

      # SSL/https router
      - "traefik.http.routers.ghc_https.rule=Host(`${TRAEFIK_SSL_DOMAIN}`) && PathPrefix(`/ghc`)"
      - "traefik.http.routers.ghc_https.entrypoints=https"
      - "traefik.http.routers.ghc_https.tls=${TRAEFIK_USE_TLS}"
      - "traefik.http.routers.ghc_https.tls.certresolver=${TRAEFIK_SSL_CERT_RESOLVER}"
      - "traefik.http.routers.ghc_https.tls.options=my_default@file"
      - "traefik.http.routers.ghc_https.middlewares=secure-headers@file"

      # local http router
      - "traefik.http.routers.ghc_http.rule=Host(`localhost`) && PathPrefix(`/ghc`)"
      - "traefik.http.routers.ghc_http.entrypoints=http"

    # volumes:
      # Optional Plugins, using Path on the host, relative to this Compose file
      # To activate: 2 steps for runner and GHC webapp:
      # - configure in ghc.env
      # - mount these as docker volume on host
      # See https://docs.docker.com/compose/compose-file/#volumes
      # - ./../GeoHealthCheck/plugins:/plugins:ro

  ghc_runner:
    image: geopython/geohealthcheck:latest

    container_name: ghc_runner

    labels:
      - "traefik.enable=false"

    env_file:
      - ghc.env

    entrypoint:
      - /run-runner.sh

  ghc_db:
    image: postgis/postgis:13-3.1-alpine
    container_name: ghc_db

    volumes:
      - ghc_db_data:/var/lib/postgresql/data
      - ./pg_config/pg-init.sh:/docker-entrypoint-initdb.d/55-pg-init.sh
      - ./pg_config/postgresql.conf:/etc/postgresql.conf

    expose:
      - 5432

    env_file:
      - ghc_db.env

    labels:
      - "traefik.enable=false"
      - "pgbackup.enable=true"

  portainer:

    image: portainer/portainer-ce:latest

    container_name: portainer

    expose:
      - "9000"

    ports:
      - "9001:9000"

    command:
      - --admin-password=$$2y$$05$$VCjhk4z8mhi8V0DpXHX56.W1jy0sNWHOwSQbXVCYPyLs/WanBODPq

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

    labels:
      # Enable Traefik routing on overlay service network
      - "traefik.enable=true"
      - "traefik.docker.network=service-network"

      - "traefik.http.middlewares.portainer_stripprefix.stripprefix.prefixes=/portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

      # SSL/https router
      - "traefik.http.routers.portainer_https.service=portainer"
      - "traefik.http.routers.portainer_https.rule=Host(`${TRAEFIK_SSL_DOMAIN}`) && PathPrefix(`/portainer/`)"
      - "traefik.http.routers.portainer_https.entrypoints=https"
      - "traefik.http.routers.portainer_https.tls=${TRAEFIK_USE_TLS}"
      - "traefik.http.routers.portainer_https.tls.certresolver=${TRAEFIK_SSL_CERT_RESOLVER}"
      - "traefik.http.routers.portainer_https.tls.options=my_default@file"
      - "traefik.http.routers.portainer_https.middlewares=portainer_stripprefix,secure-headers@file"

      # local http router
      - "traefik.http.routers.portainer_http.service=portainer"
      - "traefik.http.routers.portainer_http.rule=Host(`localhost`) && PathPrefix(`/portainer`)"
      - "traefik.http.routers.portainer_http.entrypoints=http"
      - "traefik.http.routers.portainer_http.middlewares=portainer_stripprefix"

volumes:
  portainer_data:
  ghc_db_data:

networks:
  default:
    external:
      name: service-network
